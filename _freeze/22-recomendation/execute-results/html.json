{
  "hash": "8986ac18c730bf58ff6eb987c1235170",
  "result": {
    "markdown": "---\ntitle: Recomendação\n---\n\nNesse exemplo vamos criar um modelo de recomendação baseado no código [daqui](https://keras.io/examples/structured_data/collaborative_filtering_movielens/)\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom tensorflow import keras\nimport pandas as pd\nimport os\nimport tensorflow as tf\nimport numpy as np\n```\n:::\n\n\nVamos primeiro baixar os dados:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nmovielens_data_file_url = (\n    \"http://files.grouplens.org/datasets/movielens/ml-latest-small.zip\"\n)\n\nmovielens_path = keras.utils.get_file(\n    \"ml-latest-small.zip\", movielens_data_file_url, extract=True\n)\n\nratings = os.path.dirname(movielens_path) + \"/ml-latest-small\" + \"/ratings.csv\"\ndf = pd.read_csv(ratings)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userId</th>\n      <th>movieId</th>\n      <th>rating</th>\n      <th>timestamp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>4.0</td>\n      <td>964982703</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>3</td>\n      <td>4.0</td>\n      <td>964981247</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>6</td>\n      <td>4.0</td>\n      <td>964982224</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>47</td>\n      <td>5.0</td>\n      <td>964983815</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>50</td>\n      <td>5.0</td>\n      <td>964982931</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>100831</th>\n      <td>610</td>\n      <td>166534</td>\n      <td>4.0</td>\n      <td>1493848402</td>\n    </tr>\n    <tr>\n      <th>100832</th>\n      <td>610</td>\n      <td>168248</td>\n      <td>5.0</td>\n      <td>1493850091</td>\n    </tr>\n    <tr>\n      <th>100833</th>\n      <td>610</td>\n      <td>168250</td>\n      <td>5.0</td>\n      <td>1494273047</td>\n    </tr>\n    <tr>\n      <th>100834</th>\n      <td>610</td>\n      <td>168252</td>\n      <td>5.0</td>\n      <td>1493846352</td>\n    </tr>\n    <tr>\n      <th>100835</th>\n      <td>610</td>\n      <td>170875</td>\n      <td>3.0</td>\n      <td>1493846415</td>\n    </tr>\n  </tbody>\n</table>\n<p>100836 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\nAgora vamos transformar cada usuário e cada filme em um número inteiro, para poder\nusá-los em uma camada de embedding:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nuser_ids = df[\"userId\"].unique().tolist()\nuser2user_encoded = {x: i for i, x in enumerate(user_ids)}\nuserencoded2user = {i: x for i, x in enumerate(user_ids)}\nmovie_ids = df[\"movieId\"].unique().tolist()\nmovie2movie_encoded = {x: i for i, x in enumerate(movie_ids)}\nmovie_encoded2movie = {i: x for i, x in enumerate(movie_ids)}\ndf[\"user\"] = df[\"userId\"].map(user2user_encoded)\ndf[\"movie\"] = df[\"movieId\"].map(movie2movie_encoded)\ndf[\"rating\"] = df[\"rating\"]/5\n```\n:::\n\n\nAgora podemos definir um modelo:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nclass RecommenderNet(keras.Model):\n    def __init__(self, num_users, num_movies, embedding_size, **kwargs):\n      super(RecommenderNet, self).__init__(**kwargs)\n      self.num_users = num_users\n      self.num_movies = num_movies\n      self.embedding_size = embedding_size\n      self.user_embedding = keras.layers.Embedding(\n          num_users,\n          embedding_size,\n          embeddings_initializer=\"he_normal\",\n          embeddings_regularizer=keras.regularizers.l2(1e-6),\n      )\n      self.user_bias = keras.layers.Embedding(num_users, 1)\n      self.movie_embedding = keras.layers.Embedding(\n          num_movies,\n          embedding_size,\n          embeddings_initializer=\"he_normal\",\n          embeddings_regularizer=keras.regularizers.l2(1e-6),\n      )\n      self.movie_bias = keras.layers.Embedding(num_movies, 1)\n      self.dot = keras.layers.Dot(axes=1)\n    def call(self, inputs):\n      users, movies = inputs\n      user_vector = self.user_embedding(users)\n      user_bias = self.user_bias(users)\n      movie_vector = self.movie_embedding(movies)\n      movie_bias = self.movie_bias(movies)\n      dot_user_movie = self.dot([user_vector, movie_vector])\n      x = dot_user_movie + user_bias + movie_bias\n      return tf.nn.sigmoid(x)\n```\n:::\n\n\nVamos então compilar o modelo:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nnum_users = len(user2user_encoded)\nnum_movies = len(movie_encoded2movie)\n\nmodel = RecommenderNet(num_users, num_movies, 50)\nmodel.compile(\n    loss=tf.keras.losses.BinaryCrossentropy(), \n    optimizer=keras.optimizers.Adam(learning_rate=0.001)\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n2022-05-04 09:25:58.071253: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA\nTo enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n```\n:::\n:::\n\n\nAgora podemos ajustar o modelo com:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndata = (df.user.to_numpy(), \n        df.movie.to_numpy())\n\nmodel.fit(data, df.rating.to_numpy(), \n    batch_size=64,\n    epochs=5,\n    verbose=2\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch 1/5\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n1576/1576 - 3s - loss: 0.6308 - 3s/epoch - 2ms/step\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch 2/5\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n1576/1576 - 2s - loss: 0.5762 - 2s/epoch - 1ms/step\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch 3/5\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n1576/1576 - 2s - loss: 0.5628 - 2s/epoch - 1ms/step\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch 4/5\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n1576/1576 - 2s - loss: 0.5525 - 2s/epoch - 1ms/step\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch 5/5\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n1576/1576 - 2s - loss: 0.5442 - 2s/epoch - 2ms/step\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n<keras.callbacks.History at 0x7f93d2058b80>\n```\n:::\n:::\n\n\nAgora para um usuário, podemos ver os filmes recomendados:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nmovie_df = pd.read_csv(os.path.dirname(movielens_path) + \"/ml-latest-small\"+ \"/movies.csv\")\n\n# Let us get a user and see the top recommendations.\nuser_id = df.userId.sample(1).iloc[0]\nmovies_watched_by_user = df[df.userId == user_id]\nmovies_not_watched = movie_df[\n    ~movie_df[\"movieId\"].isin(movies_watched_by_user.movieId.values)\n][\"movieId\"]\nmovies_not_watched = list(\n    set(movies_not_watched).intersection(set(movie2movie_encoded.keys()))\n)\nmovies_not_watched = [[movie2movie_encoded.get(x)] for x in movies_not_watched]\nuser_encoder = user2user_encoded.get(user_id)\nuser_movie_array = np.hstack(\n    ([[user_encoder]] * len(movies_not_watched), movies_not_watched)\n)\n\nratings = model.predict((user_movie_array[:,0],user_movie_array[:,1])).flatten()\ntop_ratings_indices = ratings.argsort()[-10:][::-1]\nrecommended_movie_ids = [\n    movie_encoded2movie.get(movies_not_watched[x][0]) for x in top_ratings_indices\n]\n\nprint(\"Showing recommendations for user: {}\".format(user_id))\nprint(\"====\" * 9)\nprint(\"Movies with high ratings from user\")\nprint(\"----\" * 8)\ntop_movies_user = (\n    movies_watched_by_user.sort_values(by=\"rating\", ascending=False)\n    .head(5)\n    .movieId.values\n)\nmovie_df_rows = movie_df[movie_df[\"movieId\"].isin(top_movies_user)]\nfor row in movie_df_rows.itertuples():\n    print(row.title, \":\", row.genres)\n\nprint(\"----\" * 8)\nprint(\"Top 10 movie recommendations\")\nprint(\"----\" * 8)\nrecommended_movies = movie_df[movie_df[\"movieId\"].isin(recommended_movie_ids)]\nfor row in recommended_movies.itertuples():\n    print(row.title, \":\", row.genres)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nShowing recommendations for user: 365\n====================================\nMovies with high ratings from user\n--------------------------------\nCast Away (2000) : Drama\nCatch Me If You Can (2002) : Crime|Drama\nPineapple Express (2008) : Action|Comedy|Crime\nTed (2012) : Comedy|Fantasy\nThe Night Before (2015) : Comedy\n--------------------------------\nTop 10 movie recommendations\n--------------------------------\nClueless (1995) : Comedy|Romance\nPocahontas (1995) : Animation|Children|Drama|Musical|Romance\nNightmare on Elm Street 4: The Dream Master, A (1988) : Horror|Thriller\nFriday the 13th (1980) : Horror|Mystery|Thriller\nNever Been Kissed (1999) : Comedy|Romance\nWedding Crashers (2005) : Comedy|Romance\n40-Year-Old Virgin, The (2005) : Comedy|Romance\nHard Candy (2005) : Drama|Thriller\nAcross the Universe (2007) : Drama|Fantasy|Musical|Romance\nHarry Potter and the Deathly Hallows: Part 2 (2011) : Action|Adventure|Drama|Fantasy|Mystery|IMAX\n```\n:::\n:::\n\n\n",
    "supporting": [
      "22-recomendation_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}