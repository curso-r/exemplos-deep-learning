{
  "hash": "b357f9e2162b73786cc77690067235f4",
  "result": {
    "markdown": "---\ntitle: TensorBoard\n---\n\nTensorBoard é uma ferramenta desenvolvida pela Google, dentro da mesma área que desenvolve o TensorFlow.\n\nEssa ferramenta serve para visualizar o modelo enquanto ele está sendo ajustado, além de oferecer outros tipos de visualização.\n\nVamos ver um exemplo:\n\n    %pip install tensorboard\n\nSe estiver usando um notebook, pode usar a extensão do tensorboard:\n\n    %load_ext tensorboard\n\nVamos então definir um modelo e ajustar:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom tensorflow import keras\nimport datetime\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nmodel = keras.models.Sequential([\n    keras.layers.Flatten(input_shape=(28, 28)),\n    keras.layers.Dense(512, activation='relu'),\n    keras.layers.Dropout(0.2),\n    keras.layers.Dense(10, activation='softmax')\n  ])\n  \nmodel.compile(\n  optimizer='adam',\n  loss='sparse_categorical_crossentropy',\n  metrics=['accuracy']\n  )\n```\n:::\n\n\nAo ajustar o modelo usamos o callback `tensorboard` passando um nome de diretório.\n\n::: {.cell .column-screen-right layout-ncol='1' execution_count=3}\n``` {.python .cell-code}\nlog_dir = \"logs/fit/\" + datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\")\ntensorboard_callback = keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)\n\n\n(x_train, y_train),(x_test, y_test) = keras.datasets.mnist.load_data()\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\nmodel.fit(x=x_train, \n          y=y_train, \n          epochs=5, \n          validation_data=(x_test, y_test), \n          callbacks=[tensorboard_callback],\n          verbose=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch 1/5\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n1875/1875 - 4s - loss: 0.2208 - accuracy: 0.9344 - val_loss: 0.1020 - val_accuracy: 0.9683 - 4s/epoch - 2ms/step\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch 2/5\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n1875/1875 - 3s - loss: 0.0957 - accuracy: 0.9706 - val_loss: 0.0770 - val_accuracy: 0.9779 - 3s/epoch - 2ms/step\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch 3/5\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n1875/1875 - 4s - loss: 0.0691 - accuracy: 0.9786 - val_loss: 0.0743 - val_accuracy: 0.9774 - 4s/epoch - 2ms/step\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch 4/5\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n1875/1875 - 3s - loss: 0.0523 - accuracy: 0.9832 - val_loss: 0.0688 - val_accuracy: 0.9786 - 3s/epoch - 1ms/step\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch 5/5\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n1875/1875 - 3s - loss: 0.0426 - accuracy: 0.9862 - val_loss: 0.0696 - val_accuracy: 0.9788 - 3s/epoch - 2ms/step\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n<keras.callbacks.History at 0x7fd538a395b0>\n```\n:::\n:::\n\n\nAgora é só iniciar o tensorboard neste diretório:\n\n```\n%tensorboard --logdir logs/fit\n```\n\n",
    "supporting": [
      "20-tensorboard_files"
    ],
    "filters": [],
    "includes": {}
  }
}