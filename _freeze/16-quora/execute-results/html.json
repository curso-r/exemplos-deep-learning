{
  "hash": "13db102e1ab123c5d7d93c51ada787d2",
  "result": {
    "markdown": "---\ntitle: Quora\nexecute:\n  eval: false\n---\n\nExemplo de modelo para comparação de duas perguntas do Quora. Originalmente o banco de dados a seguir apareceu em uma competição do [Kaggle](https://kaggle.com), o objetivo era, dado um par de perguntas responder se elas eram duplicadas ou não.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nfrom tensorflow import keras\nimport numpy as np\n```\n:::\n\n\nPrimeiro baixamos o banco de dados:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndataset = pd.read_csv(\"https://storage.googleapis.com/deep-learning-com-r/quora.csv.zip\")\n```\n:::\n\n\nVeja alguns dos pares de perguntas:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndataset.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>qid1</th>\n      <th>qid2</th>\n      <th>question1</th>\n      <th>question2</th>\n      <th>is_duplicate</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>What is the step by step guide to invest in sh...</td>\n      <td>What is the step by step guide to invest in sh...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>3</td>\n      <td>4</td>\n      <td>What is the story of Kohinoor (Koh-i-Noor) Dia...</td>\n      <td>What would happen if the Indian government sto...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>5</td>\n      <td>6</td>\n      <td>How can I increase the speed of my internet co...</td>\n      <td>How can Internet speed be increased by hacking...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>7</td>\n      <td>8</td>\n      <td>Why am I mentally very lonely? How can I solve...</td>\n      <td>Find the remainder when [math]23^{24}[/math] i...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>9</td>\n      <td>10</td>\n      <td>Which one dissolve in water quikly sugar, salt...</td>\n      <td>Which fish would survive in salt water?</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nVamos arrumar um pouquinho os dados, colocando em variáveis:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\np1 = dataset[\"question1\"].to_numpy().astype(\"str\")\np2 = dataset[\"question2\"].to_numpy().astype(\"str\")\ny = dataset[\"is_duplicate\"].to_numpy().astype(\"float\")\n```\n:::\n\n\nEntão podemos definir a camada de vetorização. Lembre-se que essa camada precisa\nser 'adaptada' antes de ser usada.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nvectorize = keras.layers.TextVectorization(max_tokens=50000, output_mode=\"int\",\n            pad_to_max_tokens=True)\nvectorize.adapt(np.append(p1, p2))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n2022-05-02 09:29:31.386461: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA\nTo enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n```\n:::\n:::\n\n\nAgora vamos definir o modelo:\n\n-   Esse modelo possui dois inputs: a pergunta 1 e a pergunta 2.\n-   Queremos que o nosso modelo retorne a probabilidade das duas perguntas serem duplicadas.\n-   Queremos que para o modelo não importe a ordem das perguntas. Isto é, se trocarmos a pergunta 1 pela pergunta 2 deveria dar a mesma probabilidade.\n\nVamos definir o modelo no Keras:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\npergunta1 = keras.layers.Input(shape=(), dtype=\"string\")\npergunta2 = keras.layers.Input(shape=(), dtype=\"string\")\n```\n:::\n\n\nAgora, queremos colocar camadas capazes de transformar cada pergunta em um vetor.\nPoderíamos usar um modelo pré-treinado, mas nesse exemplo vamos fazer do zero.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ninput = keras.layers.Input(shape=(), dtype=\"string\")\nencoded = vectorize(input)\nencoded = keras.layers.Embedding(len(vectorize.get_vocabulary()), 256)(encoded)\nencoded = keras.layers.LSTM(units=128)(encoded)\nencode_sequence = keras.Model(inputs=input, outputs=encoded)\n```\n:::\n\n\nAgora que definimos o submodelo, vamos continuar a definição do modelo inicial.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nvetor_pergunta1 = encode_sequence(pergunta1)\nvetor_pergunta2 = encode_sequence(pergunta2)\n```\n:::\n\n\n`vetor_pergunta(1|2)` é um vetor que representa cada uma das perguntas. Podemos calcular uma medida de distância entre esses dois vetores para determinar se as perguntas são parecidas ou não.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\noutput = keras.layers.Dot(axes=1)([vetor_pergunta1, vetor_pergunta2])\noutput = keras.layers.Dense(units=1, activation=\"sigmoid\")(output)\n```\n:::\n\n\nPodemos então definir o modelo:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nmodel = keras.Model(inputs=[pergunta1, pergunta2], outputs=output)\nmodel.summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel: \"model_1\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n__________________________________________________________________________________________________\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n Layer (type)                   Output Shape         Param #     Connected to                     \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n==================================================================================================\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n input_7 (InputLayer)           [(None,)]            0           []                               \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                                                                  \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n input_8 (InputLayer)           [(None,)]            0           []                               \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                                                                  \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n model (Functional)             (None, 128)          12997120    ['input_7[0][0]',                \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                                  'input_8[0][0]']                \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                                                                  \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n dot (Dot)                      (None, 1)            0           ['model[0][0]',                  \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                                  'model[1][0]']                  \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                                                                  \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n dense (Dense)                  (None, 1)            2           ['dot[0][0]']                    \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                                                                  \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n==================================================================================================\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nTotal params: 12,997,122\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nTrainable params: 12,997,122\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNon-trainable params: 0\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n__________________________________________________________________________________________________\n```\n:::\n:::\n\n\nAgora é só compilar e ajustar:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nauc = keras.metrics.AUC(curve=\"ROC\")\nmodel.compile(loss=\"binary_crossentropy\", optimizer=\"sgd\", metrics=[\"accuracy\", auc])\nmodel.fit(x=(p1, p2), y=y, epochs=5, batch_size=32, validation_split=0.2, verbose=1)\n```\n:::\n\n\n",
    "supporting": [
      "16-quora_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}