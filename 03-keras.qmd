---
title: "Keras"
jupyter: python3
---

Vamos ajustar um modelo exatamente igual ao que fizemos nos [exemplos 1](./01-linear-regression.html) e [2](./02-sgd.html) mas dessa vez usando o Keras.

:::{.callout-note}
O Keras é uma biblioteca que faz parte do TensorFlow e possui uma sintaxe concisa
para definir modelos de deep learning. O TensorFlow além de ser rápido e possuir
implementações para GPU's, possui uma feature chamada *automatic differentiation*
que calcular as derivadas automaticamente.
:::

Os dados estão sendo gerados da mesma forma que no [exemplo 1](./01-linear-regression.html).

```{python}
import numpy as np

# Data generation ----------------------------------------------

n = 1000
x = np.random.uniform(size=(n,))

W = 0.9
b = 0.1

y = W * x + b
```

Vamos importar o Keras.

```{python}
from tensorflow import keras
```

Agora vamos definir o modelo no Keras usando a API funcional:
Para definir modelos usando essa API fazemos:

1. Definimos o formato do nosso `input` usando a camada `keras.layers.Input`. Nesse
passo omitimos o número de observações. O `(1,)` nesse exemplo significa que o nosso
input é uma matriz com `1` coluna.

2. Definimos as transformações que vamos fazer no nosso input. Nesse caso usamos
a camada `keras.layers.Dense` que faz a transformação linear `W*x+ b`.

3. Por fim definimos um modelo do Keras especificando um `input` e um `output`.

```{python}
input = keras.layers.Input(shape=(1,))
output = keras.layers.Dense(units=1, use_bias=True)(input)
model = keras.Model(inputs=input, outputs=output)
```

Esse modelo possui 2 parâmetros: `w` e `b`. 

```{python}
model.summary()
```

Em seguida compilamos o modelo falando qual é a função de perda que queremos minimizar e
qual o método de otimização.

```{python}
model.compile(
    loss=keras.losses.mean_squared_error,
    optimizer=keras.optimizers.SGD(learning_rate=0.01),
)
```

Podemos então ajustar o modelo passando para o método `fit` os dados de `input` e
`output`. Também especificamos um `batch_size=1` (para ficar igual ao SGD teórico)
e o número de `epochs`. Só estamos usando `verbose=2` para a barra de prorgresso não
aparecer neste site, você pode ignorar esse parâmetro.

```{python}
history = model.fit(x=x, y=y, batch_size=1, epochs=5, verbose=2)
```

Podemos em seguida visualizar o valor da função de perda ao longo do número de épocas:

```{python}
import seaborn as sns
sns.lineplot(x=range(5), y=history.history["loss"])
```

Visualização do grafo do modelo:

```{python}
keras.utils.plot_model(model, show_shapes=True)
```

Verificar que os pesos obtidos são o mesmo que usamos apra simular os dados:

```{python}
model.get_weights()
```

Fazer previsões com o modelo ajustado:

```{python}
model.predict(x)[0:5]
```
